package com.montenichols.utils {		import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.Bitmap;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Rectangle;	import flash.display.Loader;	import flash.display.LoaderInfo;	import flash.net.URLRequest;	///////////////////	//* Description *//	///////////////////	/**	 * The ScrollBar is for movieclips	 *	 * @category   utilities	 * @package    com.montenichols.utils	 * @author     Monte Nichols (Original Author) <monte.nichols.ii@gmail.com>	 * @copyright  Virtual Reality Labs at the Center for Brainhealth	 * @version    1.0 (12/17/2014)	 */	///////////////////////	//* Scrollbar Class *//	///////////////////////	public class Scrollbar extends Sprite	{		private var top		:Number;		private var bottom	:Number;		private var dragBot	:Number;		private var range	:Number;		private var ratio	:Number;		private var sPos	:Number;		private var ctrl	:Number;		private var sBuffer	:Number;		private var arrowMove:Number;		private var isUp	:Boolean;		private var isDown	:Boolean;		private var isArrow	:Boolean;		private var targetMC:MovieClip;		private var track	:MovieClip;		private var dragHandleMC:MovieClip;		private var upScrollControl:MovieClip;		private var downScrollControl:MovieClip;				private var upScrollControlHeight:Number;		private var downScrollControlHeight:Number;		private var sRect:Rectangle;		private var image:Bitmap;		public function Scrollbar(target:MovieClip):void		{			var sBar = new MovieClip();// = new ScrollbarAssets();			addChild(sBar);			sBar.y = target.y-15;			dragHandleMC = loadImage(dragHandleMC, sBar, "../src/img/thumb.png", 0, 0 ,50 ,15);				track = loadImage(track, sBar, "../src/img/track.png", 0, 0 ,250 ,15);			upScrollControl = loadImage(upScrollControl, sBar, "../src/img/upArrow.png", 0, -15 ,15 ,15);			downScrollControl = loadImage(downScrollControl, sBar, "../src/img/downArrow.png", 0, 250+15 ,15 ,15);						// Add the Listener for scroll drag Handler			dragHandleMC.useHandCursor = true;			dragHandleMC.buttonMode = true;			dragHandleMC.addEventListener(MouseEvent.MOUSE_DOWN, dragScroll);			dragHandleMC.addEventListener(MouseEvent.MOUSE_UP, stopScroll);			init(target);		}						function loadImage(new_mc:MovieClip, parent_mc:MovieClip, urlString:String, x:int, y:int, height:int, width:int ):MovieClip {			new_mc = new MovieClip();			var myLoader:Loader = new Loader(); 			var url :URLRequest = new URLRequest(urlString);			var functionOnImageLoaded:Function = onImageLoaded(new_mc, x, y, height, width);			myLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, functionOnImageLoaded);			myLoader.load(url);			parent_mc.addChild(new_mc);			return new_mc;		}				function onImageLoaded(parent_mc:MovieClip, x:int, y:int, height:int, width:int ):Function {			return function(e:Event):void {				image = new Bitmap(e.target.content.bitmapData);				/* if you set width and height image same with the stage use this */				image.height = height;				image.width = width;				image.x = x;				image.y = y;				parent_mc.addChild(image);			};		}		public function init(target:MovieClip):void		{				targetMC = target;			sBuffer = 2;			ratio = 2;			if (targetMC.height <= track.height)			{				this.visible = false;			}						upScrollControlHeight = upScrollControl.height;			downScrollControlHeight = downScrollControl.height;						top = dragHandleMC.y;			dragBot = (dragHandleMC.y + track.height) - dragHandleMC.height;			bottom = track.height - (dragHandleMC.height/sBuffer);			range = bottom - top;			sRect = new Rectangle(0,top,0,dragBot);			ctrl = targetMC.y;						isUp = false;			isDown = false;			arrowMove = 10;			// Add the listerner for upArrow			upScrollControl.useHandCursor = true;			upScrollControl.buttonMode = true;			upScrollControl.addEventListener(Event.ENTER_FRAME, upScrollControlHandler);			upScrollControl.addEventListener(MouseEvent.MOUSE_DOWN, upScroll);			upScrollControl.addEventListener(MouseEvent.MOUSE_UP, stopScroll);				// Add the listerner for downArrow			downScrollControl.useHandCursor = true;			downScrollControl.buttonMode = true;			downScrollControl.addEventListener(Event.ENTER_FRAME, downScrollControlHandler);			downScrollControl.addEventListener(MouseEvent.MOUSE_DOWN, downScroll);			downScrollControl.addEventListener(MouseEvent.MOUSE_UP, stopScroll);				setMask(); 			this.x = targetMC.x+targetMC.width + 5;			this.y = targetMC.y+5;				}				// Set mask for the content 		private function setMask()		{			var square:Sprite = new Sprite();			square.graphics.beginFill(0x000000);			square.graphics.drawRect(targetMC.x, targetMC.y, targetMC.width+5, (track.height+downScrollControlHeight));			targetMC.parent.addChild(square);						targetMC.mask = square;			}		// Up Arrow Press		public function upScroll(event:MouseEvent):void 		{			isUp = true;		}				// Up Arrow Press		public function downScroll(event:MouseEvent):void 		{			isDown = true;		}				// Checking if up arrow is press.		public function upScrollControlHandler(event:Event):void		{			if (isUp)			{				if (dragHandleMC.y > top) 				{					dragHandleMC.y-=arrowMove;					if (dragHandleMC.y < top) 					{						dragHandleMC.y = top;					}					startScroll();				}			}		}				// Checking if down arrow is press.		public function downScrollControlHandler(event:Event):void {			if (isDown) {				if (dragHandleMC.y < dragBot) {					dragHandleMC.y+=arrowMove;					if (dragHandleMC.y > dragBot) {						dragHandleMC.y = dragBot;					}					startScroll();				}			}		}				public function dragScroll(event:MouseEvent):void		{						dragHandleMC.startDrag(false, sRect);			stage.addEventListener(MouseEvent.MOUSE_MOVE, moveScroll);			stage.addEventListener(MouseEvent.MOUSE_UP, stopScroll);			this.addEventListener(MouseEvent.MOUSE_MOVE, moveScroll);		}				public function stopScroll(event:MouseEvent):void		{			isUp = false;			isDown = false;			dragHandleMC.stopDrag();			stage.removeEventListener(MouseEvent.MOUSE_MOVE, moveScroll);			stage.removeEventListener(MouseEvent.MOUSE_UP, stopScroll);			this.removeEventListener(MouseEvent.MOUSE_MOVE, moveScroll);		}				public function moveScroll(event:MouseEvent):void		{			startScroll();		}				// scroll the content		public function startScroll():void 		{			ratio = (targetMC.height - range)/range;			sPos = (dragHandleMC.y * ratio) - ctrl;				targetMC.y = -sPos;		}			}	}/*		public function init(target:MovieClip):void		{				targetMC = target;						if (targetMC.height <= sliderTrack.height)			{				this.visible = false;			}						//upScrollControlHeight = upScrollControl.height;			//downScrollControlHeight = downScrollControl.height;						top = sliderTrack.y;			dragBottom = (top + sliderTrack.height) - slider.height;			bottom = sliderTrack.height - (slider.height/2);			range = bottom - top;			sRect = new Rectangle(0,top,0,dragBottom);			ctrl = targetMC.y;						isUp = false;			isDown = false;			arrowMove = 10;			// Add the listerner for upArrow			upScrollControl.useHandCursor = true;			upScrollControl.buttonMode = true;			upScrollControl.addEventListener(Event.ENTER_FRAME, upScrollControlHandler);			upScrollControl.addEventListener(MouseEvent.MOUSE_DOWN, upScroll);			upScrollControl.addEventListener(MouseEvent.MOUSE_UP, stopScroll);				// Add the listerner for downArrow			downScrollControl.useHandCursor = true;			downScrollControl.buttonMode = true;			downScrollControl.addEventListener(Event.ENTER_FRAME, downScrollControlHandler);			downScrollControl.addEventListener(MouseEvent.MOUSE_DOWN, downScroll);			downScrollControl.addEventListener(MouseEvent.MOUSE_UP, stopScroll);						// Add the listener for the mouseWheel			targetMC.addEventListener(MouseEvent.MOUSE_WHEEL, handleMouseWheel);				//setMask(); 			this.x = targetMC.x+targetMC.width;			this.y = targetMC.y+15;				}				// Set mask for the content 		private function setMask()		{			var square:Sprite = new Sprite();			square.graphics.beginFill(0x000000);			square.graphics.drawRect(targetMC.x, targetMC.y, targetMC.width+5, (sliderTrack.height));			targetMC.parent.addChild(square);						targetMC.mask = square;			}		// Up Arrow Press		public function upScroll(event:MouseEvent):void 		{			trace("up");			isUp = true;		}				// Up Arrow Press		public function downScroll(event:MouseEvent):void 		{			isDown = true;		}				//this is a mouse wheel handler for animations		public function handleMouseWheel(e:MouseEvent):void {			if (e.delta > 0 ) {				trace("up");				if (slider.y > top) 				{					slider.y-=arrowMove;					if (slider.y < top) 					{						slider.y = top;					}									}			} else {				if (slider.y < dragBottom) {					slider.y+=arrowMove;					if (slider.y > dragBottom) {						slider.y = dragBottom;					}									}			}			ratio = (targetMC.height - range)/range;			sPos = (slider.y * ratio) - ctrl;				targetMC.y = -sPos;		}				// Checking if up arrow is press.		public function upScrollControlHandler(event:Event):void		{			if (isUp)			{				if (slider.y > top) 				{					slider.y-=arrowMove;					if (slider.y < top) 					{						slider.y = top;					}					startScroll();				}			}		}				// Checking if down arrow is press.		public function downScrollControlHandler(event:Event):void {			if (isDown) {				if (slider.y < dragBottom) {					slider.y+=arrowMove;					if (slider.y > dragBottom) {						slider.y = dragBottom;					}					startScroll();				}			}		}				public function dragScroll(event:MouseEvent):void		{						slider.startDrag(false, sRect);			stage.addEventListener(MouseEvent.MOUSE_MOVE, moveScroll);			stage.addEventListener(MouseEvent.MOUSE_UP, stopScroll);			this.addEventListener(MouseEvent.MOUSE_MOVE, moveScroll);		}				public function stopScroll(event:MouseEvent):void		{			isUp = false;			isDown = false;			slider.stopDrag();			stage.removeEventListener(MouseEvent.MOUSE_MOVE, moveScroll);			stage.removeEventListener(MouseEvent.MOUSE_UP, stopScroll);			this.removeEventListener(MouseEvent.MOUSE_MOVE, moveScroll);		}				public function moveScroll(event:MouseEvent):void		{			startScroll();		}				// scroll the content		public function startScroll():void 		{			ratio = (targetMC.height - range)/range;			sPos = (slider.y * ratio) - ctrl;				targetMC.y = -sPos;		}			}	}*/